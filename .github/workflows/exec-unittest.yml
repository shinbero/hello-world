name: Execute unittest
# on: [push]
on: [pull_request]
jobs:
  execute-unittest-and-upload:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test_target_mod:
          - mod_1
          - mod_2
    env:
      DOCKER_REGISTRY: daianatest.azurecr.io
    steps:
      - name: Login to ACR.
        run: |
          docker login ${{ env.DOCKER_REGISTRY }} \
            -u ${{ secrets.acr_daianatest_username }} \
            -p ${{ secrets.acr_daianatest_password }}
      - name: Check out head_ref branch.
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Mergeをしたいので、コミットの歴史と複数ブランチ情報が必要.
      - name: Show all branches.
        run: |
          git branch -a
      - name: Check the mod has diff.
        run: |
          grep_result=$(git diff --name-only \
            remotes/origin/${{ github.base_ref }} \
            remotes/origin/${{ github.head_ref }} \
            | grep ${{ matrix.test_target_mod }} \
            || true)
          if [ ! -z "$grep_result" ]; then
            HAS_DIFF='1'
          else
            HAS_DIFF='0'
          fi
          echo HAS_DIFF=${HAS_DIFF}
          echo "HAS_DIFF=$HAS_DIFF" >> $GITHUB_ENV

      - name: Merge head_ref into base_ref locally.
        if: ${{ env.HAS_DIFF == '1' }}
        run: |
          git checkout ${{ github.base_ref }}
          git config --global user.name "tmp"
          git config --global user.email "tmp@example.com"
          git merge remotes/origin/${{ github.head_ref }} --no-edit
      - name: Load Dockerfile base image name.
        if: ${{ env.HAS_DIFF == '1' }}
        run: |
          cd ${{ matrix.test_target_mod }}
          BASE_IMAGE=$( ./get_base_image.sh "${{ env.DOCKER_REGISTRY }}" )
          echo "BASE_IMAGE=$BASE_IMAGE" >> $GITHUB_ENV
      - name: Create docker image for merged code.
        if: ${{ env.HAS_DIFF == '1' }}
        run: |
          # TODO: 変更があったモジュールをリストし、そこに対してループ処理でunittestする.
          cd ${{ matrix.test_target_mod }}
          UNITTEST_IMAGE=tmp_unittest_image:1.0
          echo "UNITTEST_IMAGE=$UNITTEST_IMAGE" >> $GITHUB_ENV

          docker image build \
            -t ${UNITTEST_IMAGE} \
            --build-arg base_image=${{ env.BASE_IMAGE }} .
      - name: Run unittest.
        if: ${{ env.HAS_DIFF == '1' }}
        run: |
          UNITTEST_RESULT_DIR_IN_HOST=$(pwd)/unittest-result
          UNITTEST_RESULT_DIR_IN_CONTAINER=/unittest-result
          mkdir -p "${UNITTEST_RESULT_DIR_IN_HOST}"
          echo "UNITTEST_RESULT_DIR=$UNITTEST_RESULT_DIR_IN_HOST" >> $GITHUB_ENV
          docker container run \
            -i \
            -v "${UNITTEST_RESULT_DIR_IN_HOST}":"${UNITTEST_RESULT_DIR_IN_CONTAINER}" \
            ${{ env.UNITTEST_IMAGE }} \
            unittest "${UNITTEST_RESULT_DIR_IN_CONTAINER}"

      - name: Upload Unit Test Results
        if: ${{ env.HAS_DIFF == '1' && always() }}
        uses: actions/upload-artifact@v2
        with:
          name: unittest-results-${{ matrix.test_target_mod }}
          path: ${{ env.UNITTEST_RESULT_DIR }}  

  publish-test-results:
    needs: execute-unittest-and-upload
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Check if unittest result has content.
        # もし、各モジュールのコード変更がない場合は、
        # 各unittestは実行されておらず、download-artifactの結果の
        # directoryは存在しなくなる。
        run: |
          artifact_dir_content=$(ls artifacts || true)
          if [ ! -z "$artifact_dir_content" ]; then
            DID_UNITTEST='1'
          else
            DID_UNITTEST='0'
          fi
          echo DID_UNITTEST=${DID_UNITTEST}
          echo "DID_UNITTEST=$DID_UNITTEST" >> $GITHUB_ENV

      - name: Publish Unit Test Results
        if: ${{ env.DID_UNITTEST == '1' }}
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: artifacts/**/*.xml

      - name: Check all unittest succeeded.
        if: ${{ env.DID_UNITTEST == '1' && needs.execute-unittest-and-upload.result == 'failure' }}
        run: exit 1

      # TODO:
      # Daianaのように、複数の独立したモジュールを１つのリポジトリで管理している場合、
      # PRの際に、１部のモジュールのみが開発対象となっている場合があり得る。
      # その際、以下の３つの作業は変更がないモジュールに対しては実施する必要がない。
      # ・全てのモジュールのコードをDocker image化してテストする
      # ・全てのモジュールのコードをDocker image化してACRにpushする
      # ・全てのモジュールのコードのManifestを更新する
      # そこで、変更が発生したディレクトリ名（トップディレクトリ直下に各モジュールのディレクトリがある前提）
      # を取得し、変更があったモジュールのみ、上記３ポチを実施するようにする。
