name: Execute unittest ...
# on: [push]
on: [pull_request]
jobs:
  Image-build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out head_ref branch.
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Mergeをしたいので、コミットの歴史と複数ブランチ情報が必要.
      - run: |
          git branch -a
      - name: Merge head_ref into base_ref locally.
        run: |
          git checkout ${{ github.base_ref }}
          git config --global user.name "tmp"
          git config --global user.email "tmp@example.com"
          git merge remotes/origin/${{ github.head_ref }} --no-edit
      - name: Load Dockerfile base image name.
        run: |
          . base_image_config.sh # 'BASE_IMAGE' variable will be set.
          echo "BASE_IMAGE=$BASE_IMAGE" >> $GITHUB_ENV
      - name: Create docker image for merged code.
        run: |
          docker image build -t tmp1:tmp1 --build-arg base_image=${{ env.BASE_IMAGE }} .
      - name: Run unittest using merged code.
        run: 'docker container run -i tmp1:tmp1 sh /app/exec_unittests.sh'
      # TODO:
      # unittestが失敗したときに、workflowも失敗したことにしたい。

      # TODO:
      # Daianaのように、複数の独立したモジュールを１つのリポジトリで管理している場合、
      # PRの際に、１部のモジュールのみが開発対象となっている場合があり得る。
      # その際、以下の３つの作業は変更がないモジュールに対しては実施する必要がない。
      # ・全てのモジュールのコードをDocker image化してテストする
      # ・全てのモジュールのコードをDocker image化してACRにpushする
      # ・全てのモジュールのコードのManifestを更新する
      # そこで、変更が発生したディレクトリ名（トップディレクトリ直下に各モジュールのディレクトリがある前提）
      # を取得し、変更があったモジュールのみ、上記３ポチを実施するようにする。
